<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OpenManager AI - 서버 모니터링 대시보드</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;700&display=swap" rel="stylesheet">
    <!-- 부트스트랩 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- 부트스트랩 아이콘 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <!-- Font Awesome 아이콘 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

    <style>
        /* 여기에 모든 CSS 스타일을 통합합니다. */
        :root {
            --primary-color: #4a69bd; /* OpenManager 테마 색상 */
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --background-color: #f5f6fa; /* 페이지 배경색 */
            --card-background-color: #ffffff; /* 카드 배경색 */
            --text-color: #333;
            --text-muted-color: #6c757d;
            --border-color: #dee2e6;
            --font-family-base: 'Noto Sans KR', sans-serif;
        }

        body {
            font-family: var(--font-family-base);
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            line-height: 1.6;
        }

        .container-fluid {
            padding-left: 2rem;
            padding-right: 2rem;
        }

        .header {
            background-color: var(--card-background-color);
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary-color);
            display: flex;
            align-items: center;
        }
        .logo i {
            margin-right: 0.5rem;
        }

        .nav-menu {
            display: flex;
            gap: 1rem;
        }

        .nav-item {
            color: var(--text-color);
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            transition: background-color 0.3s ease;
        }

        .nav-item:hover, .nav-item.active {
            background-color: var(--primary-color);
            color: white;
        }

        .dashboard-title-section {
            margin-bottom: 1.5rem;
        }

        .dashboard-title {
            font-size: 2rem;
            font-weight: 500;
            color: var(--dark-color);
        }
        
        #timestamp {
            font-size: 0.9rem;
            color: var(--text-muted-color);
        }

        /* AI 질의 섹션 */
        .ai-query-section {
            background-color: var(--card-background-color);
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            margin-bottom: 1.5rem;
        }
        
        .ai-query-section h5 {
            font-size: 1.25rem;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }
        .ai-query-section .text-muted {
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .query-input { /* server_dashboard.html의 query-input 과 동일하게 유지 */
            width: 100%;
            padding: 0.75rem 1rem;
            border-radius: 0.25rem;
            border: 1px solid var(--border-color);
            font-size: 1rem;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        .query-input:focus {
            border-color: var(--primary-color);
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(74, 105, 189, 0.25);
        }
        
        .ai-query-submit-btn { /* 버튼 스타일 추가 */
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.25rem;
            font-size: 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: background-color 0.15s ease-in-out;
        }
        .ai-query-submit-btn:hover {
            background-color: #3a559b; /* 조금 더 어두운 파란색 */
        }
        .ai-query-submit-btn i {
            margin-right: 0.5rem;
        }


        .query-loading {
            display: none; /* 기본적으로 숨김 */
            text-align: center;
            margin: 1rem 0;
        }
        .query-loading.active {
            display: block; /* JS로 active 클래스 추가 시 보임 */
        }

        .query-result {
            display: none; /* 기본적으로 숨김 */
            background-color: var(--light-color);
            border-radius: 0.25rem;
            padding: 1rem;
            margin-top: 1rem;
            white-space: pre-wrap; /* 줄바꿈 및 공백 유지 */
            border: 1px solid var(--border-color);
            max-height: 300px;
            overflow-y: auto;
        }
        .query-result.active {
            display: block; /* JS로 active 클래스 추가 시 보임 */
            animation: fadeIn 0.3s ease-out forwards;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* 서버 목록 제어 섹션 */
        .server-controls-section {
            background-color: var(--card-background-color);
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            margin-bottom: 1.5rem;
        }

        /* 테이블 스타일 */
        .table-responsive {
            margin-top: 1rem;
        }
        .table {
            background-color: var(--card-background-color);
            border-radius: 0.25rem;
            overflow: hidden; /* border-radius 적용 위함 */
        }
        .table th, .table td {
            vertical-align: middle;
            padding: 0.9rem; /* 패딩 조정 */
        }
        .table thead th {
            background-color: var(--light-color);
            border-bottom: 2px solid var(--border-color);
            color: var(--dark-color);
            font-weight: 500;
        }
        .table-hover tbody tr:hover {
            background-color: #e9ecef; /* 호버 색상 */
        }
        .server-row { 
            cursor: pointer; 
        }

        .usage-high { color: var(--danger-color); font-weight: 500; }
        .usage-medium { color: var(--warning-color); font-weight: 500; }
        .usage-low { color: var(--success-color); }

        .status-badge {
            padding: 0.25em 0.6em;
            font-size: 0.75em;
            font-weight: 700;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.25rem;
        }
        .badge-success { background-color: var(--success-color); color: white; }
        .badge-danger { background-color: var(--danger-color); color: white; }

        /* 페이징 컨트롤 */
        .pagination-controls {
            padding: 1rem 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* 서버 상세 정보 모달 */
        .modal-content {
            border-radius: 0.5rem;
        }
        .modal-header {
            background-color: var(--primary-color);
            color: white;
            border-bottom: none;
        }
        .modal-header .btn-close {
            filter: invert(1) grayscale(100%) brightness(200%);
        }
        .metric-card { /* 상세 정보 카드 */
            background-color: var(--light-color);
            padding: 1rem;
            border-radius: 0.25rem;
            margin-bottom: 1rem;
            border: 1px solid var(--border-color);
        }
        .metric-card h5 {
            font-size: 1.1rem;
            color: var(--dark-color);
        }

        /* 로딩 인디케이터 */
        .loading-indicator-container { /* 기존 loading 클래스명과 충돌 방지 */
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(5px);
            display: none; /* JS로 제어 */
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }
        .loading-indicator-content { /* 기존 loading-content 클래스명과 충돌 방지 */
            background: white;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            text-align: center;
        }

        /* 차트 */
        .chart-container { /* server_dashboard.html의 chart-container 와 동일하게 유지 */
             height: 300px; /* 또는 필요에 따라 조정 */
             position: relative;
             margin-bottom: 1rem;
        }

        /* 반응형 디자인 */
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                align-items: flex-start;
            }
            .nav-menu {
                margin-top: 1rem;
                width: 100%;
                justify-content: space-around;
            }
            .dashboard-title {
                font-size: 1.5rem;
            }
            .server-controls-section .input-group,
            .server-controls-section .form-select,
            .server-controls-section .btn {
                width: 100%;
                margin-bottom: 0.5rem;
            }
            .server-controls-section .d-flex {
                flex-direction: column;
            }
             .pagination-controls {
                flex-direction: column;
                gap: 0.5rem;
            }
        }
    </style>
</head>
<body>
    <!-- 로딩 인디케이터 -->
    <div class="loading-indicator-container" id="loadingIndicator">
        <div class="loading-indicator-content">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">로딩 중...</span>
            </div>
            <div>데이터를 가져오는 중입니다...</div>
        </div>
    </div>

    <!-- 헤더 -->
    <header class="header">
        <div class="logo">
            <i class="fas fa-server"></i>
            OpenManager AI
        </div>
        <nav class="nav-menu">
            <a href="index.html" class="nav-item">소개</a>
            <a href="server_dashboard.html" class="nav-item active">서버 모니터링</a>
        </nav>
    </header>

    <!-- 메인 컨텐츠 -->
    <div class="container-fluid mt-4">
        <!-- 페이지 타이틀 및 타임스탬프 -->
        <div class="dashboard-title-section">
            <h1 class="dashboard-title">서버 모니터링 대시보드</h1>
            <p id="timestamp">데이터 기준 시각: 로딩 중...</p>
        </div>

        <!-- 자동 장애 보고서 표시 섹션 (신규) -->
        <div id="autoIncidentReportSection" class="mb-4">
            <h4 class="text-danger"><i class="fas fa-shield-virus me-2"></i>자동 감지된 장애 보고서</h4>
            <div id="autoIncidentReportsContainer">
                <!-- 여기에 자동 생성된 장애 보고서 카드가 동적으로 추가됩니다. -->
                <p class="text-muted">현재 자동 감지된 장애가 없습니다.</p>
            </div>
        </div>

        <!-- AI 질의 섹션 -->
        <div class="ai-query-section card mb-4">
            <div class="card-body">
                <h5 class="card-title"><i class="fas fa-robot me-2"></i>AI 서버 분석</h5>
                <p class="card-subtitle mb-2 text-muted">서버 상태나 성능에 대해 자연어로 질문해보세요. (예: "CPU 사용률이 높은 서버는?", "메모리 상태 알려줘")</p>
                <div class="input-group mb-3">
                    <input type="text" class="form-control query-input" id="queryInput" placeholder="자연어로 질문하세요... (Enter 키를 눌러 질문)">
                    <button class="btn ai-query-submit-btn" type="button" id="ai-query-submit">
                        <i class="fas fa-paper-plane"></i> 질문하기
                    </button>
                </div>
                <div class="query-loading" id="queryLoading">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">분석 중...</span>
                    </div>
                    <p class="mt-2">AI가 분석 중입니다. 잠시만 기다려주세요...</p>
                </div>
                <div class="query-result" id="queryResult">
                    <!-- AI 분석 결과가 여기에 표시됩니다. -->
                </div>
            </div>
        </div>
        
        <!-- 서버 목록 제어 섹션 -->
        <div class="server-controls-section card mb-4">
            <div class="card-body">
                <div class="row g-3 align-items-center">
                    <div class="col-md-4">
                        <input type="text" class="form-control" id="searchInput" placeholder="호스트명 검색...">
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="statusFilter">
                            <option value="all">모든 상태</option>
                            <option value="normal">정상</option>
                            <option value="warning">주의</option>
                            <option value="critical">심각</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                         <select class="form-select" id="pageSize">
                            <option value="10">10개씩 보기</option>
                            <option value="20">20개씩 보기</option>
                            <option value="50">50개씩 보기</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-outline-primary w-100" type="button" id="refreshBtn">
                            <i class="fas fa-sync-alt"></i> 새로고침
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- 서버 목록 테이블 -->
        <div class="table-responsive card">
             <div class="card-body p-0"> <!-- 테이블 주변 패딩 제거 -->
                <table class="table table-hover mb-0"> <!-- mb-0 추가 -->
                    <thead class="table-light">
                        <tr>
                            <th scope="col" onclick="sortTable('hostname')">호스트명 <i class="fas fa-sort"></i></th>
                            <th scope="col" onclick="sortTable('cpu_usage')">CPU <i class="fas fa-sort"></i></th>
                            <th scope="col" onclick="sortTable('memory_usage_percent')">메모리 <i class="fas fa-sort"></i></th>
                            <th scope="col" onclick="sortTable('disk_usage_percent')">디스크 <i class="fas fa-sort"></i></th>
                            <th scope="col">서비스 상태</th>
                        </tr>
                    </thead>
                    <tbody id="serverTableBody">
                        <!-- 서버 데이터가 여기에 동적으로 추가됨 -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- 페이징 컨트롤 -->
        <div class="pagination-controls mt-3">
            <button class="btn btn-outline-secondary" id="prevPage" disabled><i class="fas fa-chevron-left"></i> 이전</button>
            <span id="pageInfo">1-10 / 50 서버</span>
            <button class="btn btn-outline-secondary" id="nextPage"><i class="fas fa-chevron-right"></i> 다음</button>
        </div>
    </div>

    <!-- 서버 상세 정보 모달 -->
    <div class="modal fade" id="serverDetailModal" tabindex="-1" aria-labelledby="serverDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="serverDetailModalLabel">서버 상세 정보</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="serverDetailContent">
                        <!-- 상세 정보가 여기에 동적으로 채워짐 -->
                    </div>
                    <!-- 이력 차트 컨테이너 -->
                    <div class="mt-4">
                        <h5>자원 사용량 이력</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="chart-container">
                                    <canvas id="cpuHistoryChart"></canvas>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="chart-container">
                                    <canvas id="memoryHistoryChart"></canvas>
                                </div>
                            </div>
                        </div>
                         <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="chart-container">
                                    <canvas id="diskHistoryChart"></canvas>
                                </div>
                            </div>
                             <div class="col-md-6">
                                <div class="chart-container">
                                    <canvas id="networkHistoryChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 부트스트랩 JS 및 의존성 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- 더미 데이터 생성기 -->
    <script src="dummy_data_generator.js"></script>
    <!-- AI 처리기 -->
    <script src="ai_processor.js"></script>
    <!-- 자동 장애 감지 에이전트 (신규) -->
    <script src="agent.js"></script>
    <!-- 데이터 처리기 (의존성이 있다면 ai_processor.js 이후에 로드) -->
    <script src="data_processor.js"></script>
    
    <script>
        // 전역 변수
        let serverData = [];
        let currentSort = { column: 'hostname', ascending: true };
        let charts = {}; 
        let historyCharts = {}; 
        let pageSize = 10;
        let currentPage = 1;
        let filteredData = [];

        let openManagerAgent = null; // AI 에이전트 인스턴스
        const AGENT_CHECK_INTERVAL = 10 * 60 * 1000; // 10분 (밀리초 단위)

        // 초기화 함수 (DOM 로드 완료 후 실행)
        document.addEventListener('DOMContentLoaded', function() {
            if (typeof window.AIProcessor === 'undefined' || typeof window.processQuery === 'undefined') {
                console.error("AI Processor (ai_processor.js) 가 로드되지 않았습니다.");
                displayGlobalError("AI 분석 기능을 초기화할 수 없습니다. (오류: AI_PROCESSOR_LOAD_FAIL)");
                disableAIQueryFeatures("AI 분석 기능 로드 실패");
                displayAutoReportError("자동 장애 감지 기능을 초기화할 수 없습니다. (AI Processor 누락)");
            } else if (typeof window.Agent === 'undefined') {
                 console.error("Agent (agent.js) 가 로드되지 않았습니다.");
                 displayAutoReportError("자동 장애 감지 기능을 초기화할 수 없습니다. (오류: AGENT_LOAD_FAIL)");
            } else {
                if (!window.aiProcessor) {
                    window.aiProcessor = new AIProcessor(); 
                }
                openManagerAgent = new Agent(window.aiProcessor);
            }
            init();
        });
        
        function displayGlobalError(message) {
            console.error("전역 오류:", message); 
        }

        function disableAIQueryFeatures(message) {
            const queryInput = document.getElementById('queryInput');
            const querySubmitBtn = document.getElementById('ai-query-submit');
            if (queryInput) queryInput.disabled = true;
            if (querySubmitBtn) querySubmitBtn.disabled = true;
            const queryResult = document.getElementById('queryResult');
             if (queryResult) {
                queryResult.innerHTML = '<div class="alert alert-warning">' + message + '</div>';
                queryResult.style.display = 'block';
                queryResult.classList.add('active');
            }
        }

        function displayAutoReportError(message) {
            const reportsContainer = document.getElementById('autoIncidentReportsContainer');
            if (reportsContainer) {
                reportsContainer.innerHTML = '<div class="alert alert-warning">' + message + '</div>';
            }
        }

        function init() {
            document.getElementById('loadingIndicator').style.display = 'flex';
            pageSize = parseInt(document.getElementById('pageSize').value);
            checkServerDataAndStartAgent();
            setupEventListeners();
        }

        function checkServerDataAndStartAgent() {
            if (typeof window.serverData !== 'undefined' && Array.isArray(window.serverData) && window.serverData.length > 0) {
                serverData = window.serverData;
                processServerData();
                document.getElementById('loadingIndicator').style.display = 'none';
                
                if (openManagerAgent) {
                    console.log("[Main] AI Agent 첫 실행...");
                    runAgentCheck();
                    setInterval(runAgentCheck, AGENT_CHECK_INTERVAL);
                    openManagerAgent.clearOldIncidents();
                } else {
                    console.warn("[Main] AI Agent가 초기화되지 않아 자동 장애 감지를 시작할 수 없습니다.");
                }
            } else {
                const loadingText = document.querySelector('#loadingIndicator div:last-child');
                if (loadingText) {
                    const dots = '.'.repeat((new Date().getSeconds() % 3) + 1);
                    loadingText.textContent = "서버 데이터를 가져오는 중입니다" + dots;
                }
                setTimeout(checkServerDataAndStartAgent, 200);
            }
        }
        
        async function runAgentCheck() {
            if (!openManagerAgent || !window.serverData || window.serverData.length === 0) {
                console.log("[Agent Run] 에이전트 실행 조건 미충족 (에이전트 또는 서버 데이터 없음)");
                return;
            }
            console.log("[Agent Run] 주기적 서버 상태 확인 및 장애 감지 실행...");
            try {
                const newIncidents = await openManagerAgent.checkServersAndReport(window.serverData);
                if (newIncidents && newIncidents.length > 0) {
                    console.log("[Agent Run] 새로운 장애 보고서 감지됨:", newIncidents);
                    updateAutoIncidentReportsUI(newIncidents, true);
                } else {
                    console.log("[Agent Run] 새로운 장애 없음.");
                    updateAutoIncidentReportsUI([], false);
                }
            } catch (error) {
                console.error("[Agent Run] 에이전트 실행 중 오류:", error);
                displayAutoReportError("자동 장애 감지 중 오류가 발생했습니다: " + error.message);
            }
        }

        function updateAutoIncidentReportsUI(incidents, isNew) {
            const reportsContainer = document.getElementById('autoIncidentReportsContainer');
            if (!reportsContainer) return;

            if (isNew) {
                 if (reportsContainer.querySelector('.text-muted')) {
                    reportsContainer.innerHTML = '';
                }
                incidents.forEach(incident => {
                    if (incident && incident.id && !document.getElementById(incident.id)) { 
                        const reportCard = document.createElement('div');
                        reportCard.id = incident.id;
                        reportCard.innerHTML = incident.report; 
                        reportsContainer.prepend(reportCard);
                    }
                });
            } else {
                const currentIncidentHistory = openManagerAgent ? openManagerAgent.getLatestIncidents() : [];
                if (currentIncidentHistory.length > 0) {
                    reportsContainer.innerHTML = ''; 
                    currentIncidentHistory.forEach(incident => {
                        if (incident && incident.id) {
                            const reportCard = document.createElement('div');
                            reportCard.id = incident.id;
                            reportCard.innerHTML = incident.report;
                            reportsContainer.appendChild(reportCard);
                        }
                    });
                } else {
                     reportsContainer.innerHTML = '<p class="text-muted p-3">현재 자동 감지된 장애가 없습니다. 시스템이 계속 모니터링 중입니다.</p>';
                }
            }
        }
        
        // 서버 데이터 처리 (필터링, 정렬, 렌더링)
        function processServerData() {
            applyFilters(); // 정렬이 필터링된 데이터에 대해 이루어져야 하므로 순서 중요
            renderServerTable();
            updatePagination(); // 페이지네이션은 렌더링된 테이블 기준
            updateTimestamp();
            // updateCharts(); // 초기 차트 업데이트는 서버 상세정보 표시 시로 이동
        }

        // 필터 적용 (검색어, 상태)
        function applyFilters() {
            let tempFilteredData = [...serverData]; // 원본 데이터 복사하여 사용

            // 상태 필터링
            const statusFilter = document.getElementById('statusFilter').value;
            if (statusFilter !== 'all') {
                tempFilteredData = tempFilteredData.filter(server => {
                    const serverStatus = calculateServerOverallStatus(server);
                    return serverStatus === statusFilter;
                });
            }

            // 검색 필터링
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            if (searchTerm) {
                tempFilteredData = tempFilteredData.filter(server => 
                    server.hostname.toLowerCase().includes(searchTerm)
                );
            }
            
            // 정렬 적용
            tempFilteredData.sort((a, b) => {
                let valueA = a[currentSort.column];
                let valueB = b[currentSort.column];
                
                // 특정 컬럼 특별 처리 (예: 디스크 사용률)
                if (currentSort.column === 'disk_usage_percent') {
                    valueA = a.disk[0]?.disk_usage_percent || 0;
                    valueB = b.disk[0]?.disk_usage_percent || 0;
                }

                if (typeof valueA === 'string') valueA = valueA.toLowerCase();
                if (typeof valueB === 'string') valueB = valueB.toLowerCase();

                if (currentSort.ascending) {
                    return valueA > valueB ? 1 : (valueA < valueB ? -1 : 0);
                } else {
                    return valueA < valueB ? 1 : (valueA > valueB ? -1 : 0);
                }
            });
            
            filteredData = tempFilteredData; // 최종 필터링 및 정렬된 데이터 할당
            currentPage = 1; // 필터 변경 시 1페이지로 리셋
            updateServerCount(filteredData.length);
        }
        
        // 서버 상태 계산 (applyFilters에서 사용)
        function calculateServerOverallStatus(server) {
            if (!server) return 'normal';
            if (server.cpu_usage >= 90 || server.memory_usage_percent >= 90 || (server.disk && server.disk[0]?.disk_usage_percent >= 90)) {
                return 'critical';
            } else if (server.cpu_usage >= 70 || server.memory_usage_percent >= 70 || (server.disk && server.disk[0]?.disk_usage_percent >= 70)) {
                return 'warning';
            }
            return 'normal';
        }


        // 페이지네이션 컨트롤 업데이트
        function updatePagination() {
            const totalPages = Math.ceil(filteredData.length / pageSize);
            const prevPageBtn = document.getElementById('prevPage');
            const nextPageBtn = document.getElementById('nextPage');
            
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = currentPage === totalPages || totalPages === 0;
            
            const startIndex = (currentPage - 1) * pageSize + 1;
            const endIndex = Math.min(currentPage * pageSize, filteredData.length);
            document.getElementById('pageInfo').textContent = 
                filteredData.length > 0 ? 
                `${startIndex}-${endIndex} / ${filteredData.length} 서버` : 
                '0 / 0 서버';
        }

        // 데이터 로드 함수 (새로고침 버튼 클릭 시)
        function loadServerData() {
            document.getElementById('loadingIndicator').style.display = 'flex';
            // dummy_data_generator.js가 window.generateDummyData() 함수를 제공한다고 가정
            if (typeof window.generateDummyData === 'function') {
                 window.serverData = window.generateDummyData(); // 새 더미 데이터 생성
                 serverData = window.serverData; // 전역 변수 업데이트
                 // 데이터 업데이트 이벤트 발생 (ai_processor.js에서 수신)
                 window.dispatchEvent(new CustomEvent('serverDataUpdated', { detail: serverData }));
            }
            processServerData(); // 데이터 처리 재실행
            document.getElementById('loadingIndicator').style.display = 'none';
        }
        
        // window.serverData 갱신 이벤트 리스너 (dummy_data_generator.js에서 데이터 자동 업데이트 시)
        window.addEventListener('serverDataUpdated', function(e) {
            serverData = e.detail;
            processServerData();
        });

        // 사용률에 따른 색상 클래스 반환
        function getUsageColorClass(usage) {
            if (usage >= 80) return 'usage-high';
            if (usage >= 60) return 'usage-medium';
            return 'usage-low';
        }

        // 테이블 정렬 함수
        function sortTable(column) {
            if (currentSort.column === column) {
                currentSort.ascending = !currentSort.ascending;
            } else {
                currentSort.column = column;
                currentSort.ascending = true;
            }
            // 정렬 후 다시 필터링 및 렌더링 (정렬은 필터링된 데이터에 대해 수행되어야 함)
            applyFilters(); 
            renderServerTable();
        }

        // 서버 테이블 렌더링 함수
        function renderServerTable() {
            const tbody = document.getElementById('serverTableBody');
            tbody.innerHTML = ''; // 기존 내용 초기화

            if (!filteredData || filteredData.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `<td colspan="5" class="text-center py-4">표시할 서버 데이터가 없습니다.</td>`;
                tbody.appendChild(emptyRow);
                return;
            }

            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, filteredData.length);
            const currentPageData = filteredData.slice(startIndex, endIndex);

            currentPageData.forEach(server => {
                if (!server) return; // 간혹 server가 undefined인 경우 방지

                const row = document.createElement('tr');
                row.className = 'server-row';
                row.onclick = () => showServerDetail(server);

                const diskUsage = server.disk && server.disk[0] ? server.disk[0].disk_usage_percent.toFixed(1) : 'N/A';
                const diskUsageClass = server.disk && server.disk[0] ? getUsageColorClass(server.disk[0].disk_usage_percent) : '';

                row.innerHTML = `
                    <td>${server.hostname}</td>
                    <td class="${getUsageColorClass(server.cpu_usage)}">${server.cpu_usage.toFixed(1)}%</td>
                    <td class="${getUsageColorClass(server.memory_usage_percent)}">${server.memory_usage_percent.toFixed(1)}%</td>
                    <td class="${diskUsageClass}">${diskUsage}%</td>
                    <td>${renderServiceStatus(server.services)}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // 서비스 상태 렌더링 함수
        function renderServiceStatus(services) {
            if (!services || typeof services !== 'object') return 'N/A';
            return Object.entries(services)
                .map(([service, status]) => 
                    `<span class="badge ${status === 'running' ? 'badge-success' : 'badge-danger'} me-1">${service}</span>`)
                .join(' ');
        }

        // 서버 상세 정보 표시 함수
        function showServerDetail(server) {
            const detailContent = document.getElementById('serverDetailContent');
            if (!server || !detailContent) return;

            const bytesToGB = bytes => (bytes / (1024 * 1024 * 1024)).toFixed(2);
            const diskInfo = server.disk && server.disk[0] ? server.disk[0] : { disk_total: 0, disk_used: 0, disk_usage_percent: 0 };
            const networkInfo = server.net || { interface: 'N/A', rx_bytes: 0, tx_bytes: 0, rx_errors: 0, tx_errors: 0 };
            
            let servicesHtml = 'N/A';
            if (server.services && typeof server.services === 'object') {
                servicesHtml = Object.entries(server.services)
                    .map(([name, status]) => `
                        <div class="col-md-4 mb-2">
                            <div class="d-flex align-items-center">
                                <span class="me-2">${name}:</span>
                                <span class="status-badge ${status === 'running' ? 'badge-success' : 'badge-danger'}">${status}</span>
                            </div>
                        </div>`)
                    .join('');
            }

            detailContent.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <div class="metric-card">
                            <h5><i class="fas fa-server me-2"></i>시스템 정보</h5>
                            <p><strong>OS:</strong> ${server.os}</p>
                            <p><strong>가동시간:</strong> ${server.uptime}</p>
                            <p><strong>Load Average (1m):</strong> ${server.load_avg_1m}</p>
                            <p><strong>프로세스:</strong> ${server.process_count} (좀비: ${server.zombie_count})</p>
                        </div>
                        <div class="metric-card">
                            <h5><i class="fas fa-network-wired me-2"></i>네트워크 (${networkInfo.interface})</h5>
                            <p><strong>수신:</strong> ${bytesToGB(networkInfo.rx_bytes)} GB</p>
                            <p><strong>송신:</strong> ${bytesToGB(networkInfo.tx_bytes)} GB</p>
                            <p><strong>수신 오류:</strong> ${networkInfo.rx_errors}</p>
                            <p><strong>송신 오류:</strong> ${networkInfo.tx_errors}</p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="metric-card">
                            <h5><i class="fas fa-microchip me-2"></i>CPU 사용량</h5>
                            <p>${server.cpu_usage.toFixed(1)}%</p>
                            <div class="progress" style="height: 20px;"><div class="progress-bar ${getProgressBarClass(server.cpu_usage)}" role="progressbar" style="width: ${server.cpu_usage}%" aria-valuenow="${server.cpu_usage}" aria-valuemin="0" aria-valuemax="100">${server.cpu_usage.toFixed(1)}%</div></div>
                        </div>
                        <div class="metric-card">
                            <h5><i class="fas fa-memory me-2"></i>메모리 사용량</h5>
                            <p>${server.memory_usage_percent.toFixed(1)}% (${(server.memory_used / (1024*1024)).toFixed(1)}MB / ${(server.memory_total / (1024*1024)).toFixed(1)}MB)</p>
                            <div class="progress" style="height: 20px;"><div class="progress-bar ${getProgressBarClass(server.memory_usage_percent)}" role="progressbar" style="width: ${server.memory_usage_percent}%" aria-valuenow="${server.memory_usage_percent}" aria-valuemin="0" aria-valuemax="100">${server.memory_usage_percent.toFixed(1)}%</div></div>
                        </div>
                        <div class="metric-card">
                            <h5><i class="fas fa-hdd me-2"></i>디스크 사용량 (${diskInfo.mount_point || '/'})</h5>
                            <p>${diskInfo.disk_usage_percent.toFixed(1)}% (${bytesToGB(diskInfo.disk_used)}GB / ${bytesToGB(diskInfo.disk_total)}GB)</p>
                            <div class="progress" style="height: 20px;"><div class="progress-bar ${getProgressBarClass(diskInfo.disk_usage_percent)}" role="progressbar" style="width: ${diskInfo.disk_usage_percent}%" aria-valuenow="${diskInfo.disk_usage_percent}" aria-valuemin="0" aria-valuemax="100">${diskInfo.disk_usage_percent.toFixed(1)}%</div></div>
                        </div>
                    </div>
                </div>
                <div class="metric-card mt-3">
                    <h5><i class="fas fa-concierge-bell me-2"></i>서비스 상태</h5>
                    <div class="row">${servicesHtml}</div>
                </div>
            `;
            
            // 이력 차트 업데이트
            updateHistoryCharts(server.hostname);

            const modal = new bootstrap.Modal(document.getElementById('serverDetailModal'));
            modal.show();
        }
        
        function getProgressBarClass(usage) {
            if (usage >= 80) return 'bg-danger';
            if (usage >= 60) return 'bg-warning';
            return 'bg-success';
        }

        // 이력 차트 업데이트 함수
        function updateHistoryCharts(hostname) {
            const historicalData = window.aiProcessor?.historicalData[hostname] || [];
            if (!historicalData.length) {
                 // 이전 차트가 있다면 제거
                Object.values(historyCharts).forEach(chart => chart.destroy());
                historyCharts = {}; // 차트 객체 초기화

                // 차트 컨테이너에 데이터 없음 메시지 표시
                document.getElementById('cpuHistoryChart').parentNode.innerHTML = '<canvas id="cpuHistoryChart"></canvas><p class="text-center text-muted mt-2">CPU 이력 데이터 없음</p>';
                document.getElementById('memoryHistoryChart').parentNode.innerHTML = '<canvas id="memoryHistoryChart"></canvas><p class="text-center text-muted mt-2">메모리 이력 데이터 없음</p>';
                document.getElementById('diskHistoryChart').parentNode.innerHTML = '<canvas id="diskHistoryChart"></canvas><p class="text-center text-muted mt-2">디스크 이력 데이터 없음</p>';
                document.getElementById('networkHistoryChart').parentNode.innerHTML = '<canvas id="networkHistoryChart"></canvas><p class="text-center text-muted mt-2">네트워크 이력 데이터 없음</p>';
                return;
            } else {
                // 데이터 없음 메시지가 있다면 캔버스 복원
                if (!document.getElementById('cpuHistoryChart').getContext) {
                     document.getElementById('cpuHistoryChart').parentNode.innerHTML = '<canvas id="cpuHistoryChart"></canvas>';
                     document.getElementById('memoryHistoryChart').parentNode.innerHTML = '<canvas id="memoryHistoryChart"></canvas>';
                     document.getElementById('diskHistoryChart').parentNode.innerHTML = '<canvas id="diskHistoryChart"></canvas>';
                     document.getElementById('networkHistoryChart').parentNode.innerHTML = '<canvas id="networkHistoryChart"></canvas>';
                }
            }


            const labels = historicalData.map(d => new Date(d.timestamp).toLocaleTimeString());
            const cpuData = historicalData.map(d => d.cpu_usage);
            const memoryData = historicalData.map(d => d.memory_usage_percent);
            const diskData = historicalData.map(d => d.disk_usage_percent);
            const networkRxData = historicalData.map(d => d.network_rx / (1024*1024)); // MB 단위
            const networkTxData = historicalData.map(d => d.network_tx / (1024*1024)); // MB 단위

            const chartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100, // CPU, Memory, Disk
                        ticks: { color: '#6c757d' },
                        grid: { color: 'rgba(0,0,0,0.05)' }
                    },
                    x: {
                        ticks: { color: '#6c757d', autoSkip: true, maxTicksLimit: 10 },
                        grid: { display: false }
                    }
                },
                plugins: {
                    legend: { labels: { color: '#333' } }
                }
            };
            
            const networkChartOptions = JSON.parse(JSON.stringify(chartOptions)); // 깊은 복사
            delete networkChartOptions.scales.y.max; // 네트워크는 100% 제한 없음
            networkChartOptions.scales.y.title = { display: true, text: 'MB/s', color: '#6c757d' };


            // 이전 차트가 있다면 제거
            Object.values(historyCharts).forEach(chart => chart.destroy());
            historyCharts = {};

            historyCharts.cpu = new Chart(document.getElementById('cpuHistoryChart').getContext('2d'), {
                type: 'line',
                data: { labels, datasets: [{ label: 'CPU 사용량 (%)', data: cpuData, borderColor: '#0d6efd', tension: 0.1, fill: false }] },
                options: chartOptions
            });
            historyCharts.memory = new Chart(document.getElementById('memoryHistoryChart').getContext('2d'), {
                type: 'line',
                data: { labels, datasets: [{ label: '메모리 사용량 (%)', data: memoryData, borderColor: '#198754', tension: 0.1, fill: false }] },
                options: chartOptions
            });
            historyCharts.disk = new Chart(document.getElementById('diskHistoryChart').getContext('2d'), {
                type: 'line',
                data: { labels, datasets: [{ label: '디스크 사용량 (%)', data: diskData, borderColor: '#ffc107', tension: 0.1, fill: false }] },
                options: chartOptions
            });
             historyCharts.network = new Chart(document.getElementById('networkHistoryChart').getContext('2d'), {
                type: 'line',
                data: {
                    labels,
                    datasets: [
                        { label: '수신 (MB/s)', data: networkRxData, borderColor: '#6f42c1', tension: 0.1, fill: false },
                        { label: '송신 (MB/s)', data: networkTxData, borderColor: '#fd7e14', tension: 0.1, fill: false }
                    ]
                },
                options: networkChartOptions
            });
        }

        function closeServerDetail() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('serverDetailModal'));
            if (modal) {
                modal.hide();
            }
        }
        
        // 데이터 기준 시각 업데이트
        function updateTimestamp() {
            const now = new Date();
            document.getElementById('timestamp').textContent = `데이터 기준 시각: ${now.toLocaleString()}`;
        }

        // 서버 개수 업데이트
        function updateServerCount(count) {
            // 현재는 페이지 정보에 포함되어 있어 별도 업데이트 불필요. 필요시 여기에 로직 추가
        }
        
        // 이벤트 리스너 설정
        function setupEventListeners() {
            // 새로고침 버튼
            document.getElementById('refreshBtn').addEventListener('click', loadServerData);
            
            // 검색 입력
            document.getElementById('searchInput').addEventListener('input', function() {
                processServerData(); // 검색 시 데이터 즉시 재처리
            });
            
            // 상태 필터
            document.getElementById('statusFilter').addEventListener('change', function() {
                processServerData(); // 상태 필터 변경 시 데이터 즉시 재처리
            });
            
            // 페이지 사이즈 변경
            document.getElementById('pageSize').addEventListener('change', function() {
                pageSize = parseInt(this.value);
                currentPage = 1; // 페이지 리셋
                renderServerTable(); // 테이블만 다시 그림
                updatePagination();
            });
            
            // 이전 페이지 버튼
            document.getElementById('prevPage').addEventListener('click', function() {
                if (currentPage > 1) {
                    currentPage--;
                    renderServerTable();
                    updatePagination();
                }
            });
            
            // 다음 페이지 버튼
            document.getElementById('nextPage').addEventListener('click', function() {
                const totalPages = Math.ceil(filteredData.length / pageSize);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderServerTable();
                    updatePagination();
                }
            });
            
            // AI 질의 입력 (Enter 키)
            const queryInput = document.getElementById('queryInput');
            if (queryInput) {
                queryInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && this.value.trim() !== '') {
                        e.preventDefault(); 
                        handleQuery(this.value);
                        // Enter 키 입력 후 입력창 비우기 (선택 사항)
                        // this.value = ''; 
                    }
                });
                 // input 이벤트로 실시간 추천 단어 표시 등의 기능 추가 가능 (선택 사항)
                queryInput.addEventListener('input', function(e) {
                    // 예를 들어, 입력 길이가 0이면 이전 결과 숨기기
                    const queryResult = document.getElementById('queryResult');
                    if (this.value.trim() === '' && queryResult) {
                         // queryResult.classList.remove('active'); 
                         // queryResult.style.display = 'none';
                    }
                });
            }
            // AI 질의 제출 버튼 클릭
            const querySubmitBtn = document.getElementById('ai-query-submit');
            if (querySubmitBtn) {
                querySubmitBtn.addEventListener('click', function() {
                    const queryText = queryInput ? queryInput.value : '';
                    if (queryText.trim() !== '') {
                        handleQuery(queryText);
                    } else if (queryInput) {
                        // 입력값이 없을 때 사용자에게 알림 (선택 사항)
                        queryInput.focus();
                        // 간단한 애니메이션 효과로 입력 유도
                        queryInput.classList.add('is-invalid');
                        setTimeout(() => queryInput.classList.remove('is-invalid'), 1500);
                    }
                });
            }
        }

        // AI 질의 처리
        async function handleQuery(queryText) {
            if (!queryText.trim()) return;
            
            const queryLoading = document.getElementById('queryLoading');
            const queryResult = document.getElementById('queryResult');
            const queryInput = document.getElementById('queryInput'); // 입력창 참조

            queryLoading.classList.add('active');
            queryResult.classList.remove('active');
            queryResult.style.display = 'block'; 
            queryResult.innerHTML = ''; 
            
            try {
                // window.processQuery 함수가 존재하는지 다시 한번 확인
                if (typeof window.processQuery !== 'function') {
                    console.error("window.processQuery is not a function. AI Processor가 올바르게 로드되었는지 확인해주세요.");
                    throw new Error('AI 분석 요청을 처리할 수 없습니다. (window.processQuery 누락)');
                }
                
                // console.log(`Sending query to AI: ${queryText}`); // 디버깅 로그
                const response = await window.processQuery(queryText);
                // console.log(`Received AI response: ${response}`); // 디버깅 로그
                
                queryResult.innerHTML = response; 
                queryResult.classList.add('active');

                                // 성공적인 질의 후 입력창 비우기 (선택 사항)                if(queryInput) {                    // queryInput.value = '';                 }            } // try 블록 닫기            catch (error) {
                console.error('AI 질의 처리 중 심각한 오류 발생:', error);

                const errorContainer = document.createElement('div');
                errorContainer.className = 'alert alert-danger';
                
                const title = document.createElement('strong');
                title.textContent = 'AI 분석 중 오류가 발생했습니다.';
                errorContainer.appendChild(title);
                errorContainer.appendChild(document.createElement('br')); 

                const messageIntro = document.createElement('span');
                messageIntro.textContent = '오류 메시지: ';
                errorContainer.appendChild(messageIntro);

                const messageContent = document.createElement('span');
                messageContent.textContent = error.message || '알 수 없는 오류'; 
                errorContainer.appendChild(messageContent);
                errorContainer.appendChild(document.createElement('br')); 

                const adviceParagraph = document.createElement('span');
                adviceParagraph.textContent = '잠시 후 다시 시도하거나, 문제가 지속되면 관리자에게 문의해주세요. (오류 코드: HANDLE_QUERY_ERROR)';
                errorContainer.appendChild(adviceParagraph);

                queryResult.innerHTML = ''; 
                queryResult.appendChild(errorContainer);
                queryResult.classList.add('active');
            } finally {
                queryLoading.classList.remove('active');
            }
        }
    </script>
</body>
</html> 